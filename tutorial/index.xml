<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Tarant</title>
    <link>http://tarantx.github.io/tutorial/</link>
    <description>Recent content in Tutorial on Tarant</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://tarantx.github.io/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started</title>
      <link>http://tarantx.github.io/tutorial/getting-started/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://tarantx.github.io/tutorial/getting-started/</guid>
      <description>Tarant is a JavaScript library that implements the Actor Model, which makes concurrent programming easy to understand and maintain. Thus, the most important building block of Tarant is the Actor. This getting started guide will walk you through the basic flow of starting an Actor System (which holds actor references) and your first actor, in a running application.
Setting up Tarant The only step needed for using Tarant is installing the library.</description>
    </item>
    
    <item>
      <title>How To Create an Actor System</title>
      <link>http://tarantx.github.io/tutorial/how-to-create-an-actor-system/</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://tarantx.github.io/tutorial/how-to-create-an-actor-system/</guid>
      <description>Actor Systems hold all the information about the location of all the actors on an application, even if they are in memory or not. They are composed of:
 Materializers Resolvers A Top Level Supervisor Fibers Mailboxes  There are two main ways to create an Actor System in tarant. One uses the default configuration, and the other one lets the developer configure most of the advanced fields for customizing the behaviour.</description>
    </item>
    
    <item>
      <title>How To Create an Actor</title>
      <link>http://tarantx.github.io/tutorial/how-to-create-an-actor/</link>
      <pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://tarantx.github.io/tutorial/how-to-create-an-actor/</guid>
      <description>Actors represent the main unit of logic in the Actor Model. They are transactional, asynchronous and safe. When you work with actors, you have the following guarantees:
 A single actor will process a single message at a time. For example, if you call a method in an actor two times, you will not process those calls in parallel, but sequentially. A single actor will process messages in order. For example, if you call two different methods in an actor, messages will be processed in the calling order.</description>
    </item>
    
  </channel>
</rss>